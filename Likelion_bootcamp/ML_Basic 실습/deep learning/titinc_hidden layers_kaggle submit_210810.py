# -*- coding: utf-8 -*-
"""titinc_210810.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16OUE2gjPSn3nVntABY8wRx19BFjv4qSo

## 딥러닝 모델 구현해 보기
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import pandas as pd
import tensorflow as tf

import keras
from keras.models import Sequential
from keras.layers import Dense

train = pd.read_csv("train.csv")
test = pd.read_csv("test.csv")
print(train.shape, test.shape)

train.info()

input_col = ['Pclass', 'SibSp', 'Parch']
labeled_col = ['Survived']

X = train[ input_col ]
y = train[ labeled_col ]
X_val = test[ input_col ]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, random_state = 0)

from keras.models import Sequential
from keras.layers import Dense

# 모델 생성- 은닉층 하나,  8개 노드. 활성화 함수는 sigmoid

model = Sequential()
model.add(Dense(8, input_dim=3, activation='sigmoid'))
model.add(Dense(1, activation='sigmoid')) # 이진분휴는 1, activation=sigmoid 해줘야 함

# feature를 2개로 만들어보기. 은닉층 2개(뉴런 개수는 임의로 하기)

model.summary()

model.compile(loss = 'binary_crossentropy',
              optimizer = 'sgd',
              metrics=['accuracy'])
model.fit(X_train, y_train, epochs=100, batch_size=10)


# keras는 여기서 또 돌리면, 끝난 시점에서 또 시작이 되기 때문에, 위에 코드부터 다시 돌려줘야 한다

model.evaluate(X_test, y_test)

pred = model.predict(X_val)
pred

# 생존할 확률이 적으면0에 가깝고 높으면 1에 가까움

sub['Survived'] = pred[:, 0] > 0.5   # 0.5가 임계값

# 0,5를 기준으로 0.5보다 높으면 True(생존1), 낮으면 False(사망2)
sub.loc[sub['Survived']==True, 'Survived'] = 1
sub.loc[sub['Survived']==False, 'Survived'] = 0

sub.to_csv("titanic_submit1.csv", index=False)

"""## 결과(기본)
* 은닉층1(8개), feature(3), batch_size =10, epochs = 100, optimizer:sgd
* score: 0.66028

### 은닉층을 늘리면 좀 더 성능이 좋아질까?
"""

model = Sequential()
model.add(Dense(8, input_dim=3, activation='sigmoid'))
model.add(Dense(8, activation='sigmoid'))
model.add(Dense(1, activation='sigmoid')) # 이진분휴는 1, activation=sigmoid 해

model.compile(loss = 'binary_crossentropy',
              optimizer = 'sgd',  #
              metrics=['accuracy'])
model.fit(X_train, y_train, epochs=100, batch_size=10)

pred = model.predict(X_val)

sub['Survived'] = pred[:, 0] > 0.5

sub.loc[sub['Survived']==True, 'Survived'] = 1
sub.loc[sub['Survived']==False, 'Survived'] = 0

sub.to_csv("titanic_submit2.csv", index=False)

"""## 결과
* 은닉층2(8개), feature(3), batch_size =10, epochs = 100, optimizer:sgd
* score: 0.61961

### optimizer = adam 으로 변경
"""

# 모델 생성- 은닉층 두개,  8개 노드. 활성화 함수는 sigmoid

model = Sequential()
model.add(Dense(8, input_dim=3, activation='sigmoid'))
model.add(Dense(8, activation='sigmoid'))
model.add(Dense(1, activation='sigmoid')) # 이진분휴는 1, activation=sigmoid 해

model.compile(loss = 'binary_crossentropy',
              optimizer = 'adam',
              metrics=['accuracy'])
model.fit(X_train, y_train, epochs=100, batch_size=10)

pred = model.predict(X_val)

sub['Survived'] = pred[:, 0] > 0.5

sub.loc[sub['Survived']==True, 'Survived'] = 1
sub.loc[sub['Survived']==False, 'Survived'] = 0

sub.to_csv("titanic_submit3.csv", index=False)

"""## 결과 
* 은닉층2(8개), feature(3), batch_size =10, epochs = 100, optimizer:adam
* score: 0.67464

## 결측치를 처리하고 점수를 다시 내보자!
"""

train.isna().sum() #결측치 확인

# Age_mean = train['Age'].mean()  #평균값 변수 하나 새로 만들기 
# train['Age'] = train['Age'].fillna(Age_mean, inplace=True) 
train['Age'] = train['Age'].fillna(train['Age'].mean(), inplace=True) 
train.isna().sum()



train.head()

train['Age_mean'] = train.sum(axis=1)

train.info()

train.head()

input_col = ['Age_mean']
labeled_col = ['Survived']

X = train[ input_col ]
y = train[ labeled_col ]
X_val = test[ input_col ]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, random_state = 0)

from keras.models import Sequential
from keras.layers import Dense

model = Sequential()
model.add(Dense(8, input_dim=3, activation='sigmoid'))
model.add(Dense(8, activation='sigmoid'))
model.add(Dense(1, activation='sigmoid')) # 이진분휴는 1, activation=sigmoid 해

model.compile(loss = 'binary_crossentropy',
              optimizer = 'adam',
              metrics=['accuracy'])
model.fit(X_train, y_train, epochs=100, batch_size=10)

pred = model.predict(X_val)

sub['Survived'] = pred[:, 0] > 0.5

sub.loc[sub['Survived']==True, 'Survived'] = 1
sub.loc[sub['Survived']==False, 'Survived'] = 0

sub.to_csv("titanic_submit4.csv", index=False)

